// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GameOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerBId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.HasIndex("GameOptionId");

                    b.HasIndex("PlayerAId")
                        .IsUnique();

                    b.HasIndex("PlayerBId")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.GameOption", b =>
                {
                    b.Property<int>("GameOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardWidth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ENextMoveAfterHit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EShipsCanTouch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("GameOptionId");

                    b.ToTable("GameOptions");
                });

            modelBuilder.Entity("Domain.GameOptionShip", b =>
                {
                    b.Property<int>("GameOptionShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameOptionShipId");

                    b.HasIndex("GameOptionId");

                    b.HasIndex("ShipId");

                    b.ToTable("GameOptionBoats");
                });

            modelBuilder.Entity("Domain.GameShip", b =>
                {
                    b.Property<int>("GameShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSunk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameShipId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameBoats");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EPlayerType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameAId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameBId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId");

                    b.HasIndex("GameAId")
                        .IsUnique();

                    b.HasIndex("GameBId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.PlayerBoardState", b =>
                {
                    b.Property<int>("PlayerBoardStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoardState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerBoardStateId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerBoardState");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShipId");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.HasOne("Domain.GameOption", "GameOption")
                        .WithMany("Games")
                        .HasForeignKey("GameOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerA")
                        .WithOne()
                        .HasForeignKey("Domain.Game", "PlayerAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Player", "PlayerB")
                        .WithOne()
                        .HasForeignKey("Domain.Game", "PlayerBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameOption");

                    b.Navigation("PlayerA");

                    b.Navigation("PlayerB");
                });

            modelBuilder.Entity("Domain.GameOptionShip", b =>
                {
                    b.HasOne("Domain.GameOption", "GameOption")
                        .WithMany("GameOptionShips")
                        .HasForeignKey("GameOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Ship", "Ship")
                        .WithMany("GameOptionShips")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameOption");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Domain.GameShip", b =>
                {
                    b.HasOne("Domain.Player", "Player")
                        .WithMany("GameBoats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.HasOne("Domain.Game", "GameA")
                        .WithOne()
                        .HasForeignKey("Domain.Player", "GameAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Game", "GameB")
                        .WithOne()
                        .HasForeignKey("Domain.Player", "GameBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameA");

                    b.Navigation("GameB");
                });

            modelBuilder.Entity("Domain.PlayerBoardState", b =>
                {
                    b.HasOne("Domain.Player", "Player")
                        .WithMany("PlayerBoardStates")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.GameOption", b =>
                {
                    b.Navigation("GameOptionShips");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Navigation("GameBoats");

                    b.Navigation("PlayerBoardStates");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Navigation("GameOptionShips");
                });
#pragma warning restore 612, 618
        }
    }
}
